{
  "blogs": [
    {
      "title": "siasisa band",
      "body": "sams",
      "author": "joseph",
      "id": 1
    },
    {
      "title": "web sockets",
      "body": " Have you ever wanted to create a real-time chat app or just curious about how the operation looks like under the hood?\n\n![phone](https://media.giphy.com/media/l3vR2NcAVb9nhBoEE/giphy.gif)\n\nToday we will be discussing how we can communicate with the client, browser, and server using NodeJS, ExpressJs, and Socket.io\n\nFirst, let's define what a web socket is.\nWeb Socket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection.\nThis communication is bi-directional and allows real-time data flow (transfer) because web sockets are always opened.\n\n## Prerequisite\n✔ NodeJS fundamentals\n✔ JavaScript Fundamentals\n✔ Fair knowledge of NPM\n\n## Getting Started\n### To-do\n* Initiate our project\n* Install Packages\n* Set Up Express app and listen to the server\n* Create a static middleware\n* Use socket.io on the server-side (index.js) and in the front end (index.html)\n* Querying Document Object Model (DOM)\n* Broadcasting Messages\n\n## Follow instructions to start the project\n``` Initiate your project using npm init and pass the '-y' flag to default all questions. This creates your package.json file that tracks all the dependencies and list information about the project```\n![carbon (2)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e4lvxai1frx57oronpa.png)\n \n``` Install dependencies: Express and Socket.io```\n![carbon (4)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idrs7i7z52yer3zuavlm.png)\n\n\n```Install Nodemon to automatically restart the server, save it as a Dev dependency by using the --save-dev flag```\n![carbon (5)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6srstg7c3c68uqqi0lx.png)\n\n\nCreate an entry point, in this case, I will use index.js. Feel free to change your main entry file on the package.json\nSo let's set up our express application and create an instance of an express app\n\n![carbon (1)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de54nnaw51g08zy26dde.png)\n \n\nLet's test ⛏ out the application by running Nodemon index on the terminal.\nIf you set up your app correctly, You will get the result below\n\n```\n[nodemon] starting `node index.js`\nApp is listening to server on port 3000\n```\n\nWhen you run localhost:3000 on your browser, the response is ```cannot GET /```. To be able to serve static files such as HTML, images, CSS to the browser, create a folder called \"public\", an index.html, and write the middleware in your index.js file.\n\n```\n// Static files middleware\napp.use(express.static('public'));\n```\n\n✍ \nNote: Middleware is functions written between your request and response. Express automatically looks inside the public folder (static file) and serves the index.html.\n\nFor demonstration, let's flesh out a boilerplate inside the index.html file.\n\n![carbon (6)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8ehuyqdr2c9k50mp28d.png)\n So when you refresh the initial *localhost:3000* it will serve **Home Page** on the browser screen\n\nNext up is to use socket.io in our index.js by first requiring the socket module\n```const socket = require('socket.io');```\n\nAnd then set up socket.io and link to the server the express app is listening to\n```JavaScript\nconst io = socket(server);\n```\nAt this point, the server is open and awaiting an event to be fired.\n\nTo make the WebSocket listen to an event when a particular client connects to the server, we write the function below.\n```JavaScript\nio.on('connection', (socket)=>{\nconsole.log('Socket connected successfully')\n);\n```\n\nLet load socket.io to our front-end to establish the communication between both ends.\n[socket.io cdn](https://cdnjs.com/libraries/socket.io)\n\n![socket i](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7u0e3im32annvzpmv7s.JPG)\n\nCopy the link above from the socket.io CDN and paste it inside the index.html file inside the public folder as a script file. (Highlighted in yellow).\n\n![carbon (7)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmbfv9t8o29d6rkfb9pl.png)\n \nThe next thing is to create a JavaScript file inside the public folder where we run the socket.io logic on the front-end. I will name it front_end_Chat.js and make reference to it inside the index.html. (highlighted in red)\n\n![carbon (9)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y9nkbhj8ripm45lqoaf.png).\n\n### Explanation ✍\nWhen we load the index.html served to us in the browser, the browser loads in the socket.io CDN (highlighted in yellow above) and then runs the front_end_Chat.js file.\n\nNext is to establish the connection with the backend server inside the front_end_Chat.js file to create a web socket between both ends.\n \n```JavaScript\n// Make connection front-end setup\nconst socket = io.connect('http://localhost:3000');\n```\n Here, when we load up the index.html file in the browser, we run the socket.io file, get to the front_end_Chat.js, make the connection on the just written function above, we listen to the **connection** on the backend inside the index.js file (see reference below) and log the message *' Socket connected successfully'* on our terminal when we refresh the page.\n\n```JavaScript\n// Backend connection\nio.on('connection', (socket) => {\nconsole.log('Socket connected successfully')\n});\n```\n\nWe can log different socket unique IDs to the console every time we refresh the server or a different computer connects to the same IP address. In this case http://localhost:3000\n```JavaScript\n// Backend connection\nio.on('connection', (socket) => {\nconsole.log('Socket connected successfully', socket.id)\n});\n```\n\nAt this point, we have set up socket.io both on the front end and the backend. Now let's look at how we can emit a message to different clients (browser) by transferring data between both ends through information we set on our front-end.\n\nHere, we create inputs and a button in our index.html files to store and send user information and message.\n\n```HTML\n    <div id=\"tiny-chat\">\n        <div id=\"tiny-window\">\n            <div id=\"output\"></div>\n            <div id=\"feedback\"></div>\n        </div>\n        <input id=\"handle\" type=\"text\" placeholder=\"Handle\" />\n        <input id=\"message\" type=\"text\" placeholder=\"Message\" />\n        <button id=\"send\">Send</button>\n    </div>\n```\n\nThereafter, we flesh out the JavaScript on the front-end i.e front_end_Chat.js which interacts with the inputs and button above and emits a message through the JavaScript File from the client down to the server.\n\nI used id to style the chatroom. Find the codebase on my GitHub.\n[Github Link](https://github.com/drsimplegraffiti/tiny)\n\nThe next thing to do is to Query the DOM inside the front_end_Chat.js\n\n```JavaScript\n// Query DOM\nconst message = document.getElementById('message'),\n    handle = document.getElementById('handle'),\n    btn = document.getElementById('send'),\n    output = document.getElementById('output');\n```\nThe next thing is to emit a message when a user clicks on the send button using Vanilla JavaScript inside the same file.\n\n```JavaScript\n// Emit events\nbtn.addEventListener('click', function() {\n    socket.emit('chat', {\n        message: message.value,\n        handle: handle.value\n    });\n    message.value = \"\";\n});\n```\n\n##Explanation ✍\nWhen we click the send button (btn), we listen for a click event, then fires a call back function, emit a message using the *socket.emit* function. The emit function takes two parameters (the name of the message which we call 'chat') and message (data sent to the server).\n\nNext up, we need to handle the message sent from the front end on the server (index.js) by listening to the message.\n\n```JavaScript\nconst io = socket(server);\nio.on('connection', (socket) => {\n\n    console.log('made socket connection', socket.id);\n\n    // Handle chat event\n    socket.on('chat', function(data) {\n        console.log(data);\n        io.sockets.emit('chat', data);\n    });\n```\n\nOn the front-end, We need a way to handle and output the *data* emitted on the socket.on function to the DOM. On the front_end_Chat.js we write the function below to listen for events.\n\n```JavaScript\n// Listen for events\nsocket.on('chat', function(data) {\n    feedback.innerHTML = '';\n    output.innerHTML += '<p><strong>' + data.handle + ': </strong>' + data.message + '</p>';\n});\n```\n\nLastly, we will need to broadcast the message emitted to the server to every web socket and client connected to it in real-time except the client sending the message.\n\nTo achieve this we need another input method to display the feedback sent from the server. Here, we use a div element on the index.html and make a reference to it in the front_end_Chat.js\n![carbon (10)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilq1o0k1c154y1koow4d.png)\n \n![carbon (11)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3t32qbfordklezwdjzy.png)\n \nThen we attach an event listener to the message input using the keypress event and emit a message to the server\n\n![carbon (12)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i71jt6gwsingj0jtn2l5.png)\n \nNext, we navigate into the server-side (index.js) and use the *broadcast.emit* method\n\n![carbon (13)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksj5bcbdkisotk36koaf.png)\n\nAnd then we handle the on the front_end_Chat.js\n![carbon (15)](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnam6zx63sfwyrgjlu84.png)\n \nFinal test",
      "author": "joseph",
      "id": 2
    }
  ]
}